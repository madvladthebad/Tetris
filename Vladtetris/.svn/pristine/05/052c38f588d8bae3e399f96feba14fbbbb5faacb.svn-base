package view;

import java.awt.BorderLayout;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JFrame;
import javax.swing.JPanel;
import model.Board;
/**
 * 
 * @author Vladimir
 *@version TCSS 305 Spring 2013
 */
@SuppressWarnings("serial")
public class TetrisGUI extends JPanel implements Observer {
  
  /**
   * the main JFrame to contain all other parts.
   */
  
  
  private final JFrame my_gui_frame;
  
  /**
   * the side Jpanel that will contian the key and next 
   * piece panels.
   */
  
  private final JPanel my_side_gui_frame;
  /**
   * the panel that animates the peices that fall down.
   */
  
  private final TetrisPanel my_tetris_panel;
  
  /**
   * the panel that displays the control keys.
   */
  
  private final KeyControlsPanel my_panelkey;
  /**
   * the panel that displays the next peice that will 
   * appear.
   */
  
  private final NextPiecePanel my_next_piece_panel;
  /**
   * the tetris GUI that sets the layout and creates the initial panels.
   */
  public TetrisGUI() {
    super();
    final Board playing_board = new Board();
   
   
    my_gui_frame = new JFrame("Tetris");
   
    my_side_gui_frame = new JPanel(new BorderLayout());
   
    my_tetris_panel = new TetrisPanel(playing_board);
   
    my_panelkey = new KeyControlsPanel();
   
    my_next_piece_panel = new NextPiecePanel(playing_board);
   
   
   
    
    playing_board.addObserver(this);
    
    start();
    
    
  }
  /**
   * method that constructs the layout and sets the visibility.
   */
  private void start() {
    
    
    
    
    
    my_gui_frame.add(my_tetris_panel, BorderLayout.CENTER);
    my_side_gui_frame.add(my_next_piece_panel, BorderLayout.NORTH);
    my_side_gui_frame.add(my_panelkey, BorderLayout.SOUTH);
    
    my_gui_frame.add(my_side_gui_frame, BorderLayout.EAST);
    my_gui_frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    my_gui_frame.pack();
    my_gui_frame.setLocationRelativeTo(null);
    my_gui_frame.setVisible(true);
    
    
  }
  

  @Override
  public void update(final Observable the_arg, final Object the_board) {
    my_next_piece_panel.repaint();
    my_tetris_panel.repaint();

    
  }

}